//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.05.04 at 01:49:42 PM EEST 
//


package gr.ntua.ivml.mint.rdf.edm.types;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;


/**
 * DCTermsType contains the DC Terms Properties.
 * 
 * <p>Java class for DCTermsType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DCTermsType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="alternative" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="conformsTo" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="created" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="extent" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="hasFormat" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="hasVersion" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="isFormatOf" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="isReferencedBy" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="isReplacedBy" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="isRequiredBy" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="issued" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="isVersionOf" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="medium" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="provenance" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="references" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="replaces" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="requires" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="spatial" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="tableOfContents" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="temporal" type="{http://www.example.org/EDMSchemaV9}SimpleLiteral" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DCTermsType", propOrder = {
    "alternative",
    "conformsTo",
    "created",
    "extent",
    "hasFormat",
    "hasVersion",
    "isFormatOf",
    "isReferencedBy",
    "isReplacedBy",
    "isRequiredBy",
    "issued",
    "isVersionOf",
    "medium",
    "provenance",
    "references",
    "replaces",
    "requires",
    "spatial",
    "tableOfContents",
    "temporal"
})
public class DCTermsType {

    protected List<SimpleLiteral> alternative;
    protected List<SimpleLiteral> conformsTo;
    protected List<SimpleLiteral> created;
    protected List<SimpleLiteral> extent;
    protected List<SimpleLiteral> hasFormat;
    protected List<SimpleLiteral> hasVersion;
    protected List<SimpleLiteral> isFormatOf;
    protected List<SimpleLiteral> isReferencedBy;
    protected List<SimpleLiteral> isReplacedBy;
    protected List<SimpleLiteral> isRequiredBy;
    protected List<SimpleLiteral> issued;
    protected List<SimpleLiteral> isVersionOf;
    protected List<SimpleLiteral> medium;
    protected List<SimpleLiteral> provenance;
    protected List<SimpleLiteral> references;
    protected List<SimpleLiteral> replaces;
    protected List<SimpleLiteral> requires;
    protected List<SimpleLiteral> spatial;
    protected List<SimpleLiteral> tableOfContents;
    protected List<SimpleLiteral> temporal;

    /**
     * Gets the value of the alternative property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the alternative property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAlternative().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getAlternative() {
        if (alternative == null) {
            alternative = new ArrayList<SimpleLiteral>();
        }
        return this.alternative;
    }

    /**
     * Gets the value of the conformsTo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the conformsTo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConformsTo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getConformsTo() {
        if (conformsTo == null) {
            conformsTo = new ArrayList<SimpleLiteral>();
        }
        return this.conformsTo;
    }

    /**
     * Gets the value of the created property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the created property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCreated().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getCreated() {
        if (created == null) {
            created = new ArrayList<SimpleLiteral>();
        }
        return this.created;
    }

    /**
     * Gets the value of the extent property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the extent property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getExtent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getExtent() {
        if (extent == null) {
            extent = new ArrayList<SimpleLiteral>();
        }
        return this.extent;
    }

    /**
     * Gets the value of the hasFormat property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the hasFormat property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getHasFormat().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getHasFormat() {
        if (hasFormat == null) {
            hasFormat = new ArrayList<SimpleLiteral>();
        }
        return this.hasFormat;
    }

    /**
     * Gets the value of the hasVersion property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the hasVersion property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getHasVersion().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getHasVersion() {
        if (hasVersion == null) {
            hasVersion = new ArrayList<SimpleLiteral>();
        }
        return this.hasVersion;
    }

    /**
     * Gets the value of the isFormatOf property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the isFormatOf property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIsFormatOf().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getIsFormatOf() {
        if (isFormatOf == null) {
            isFormatOf = new ArrayList<SimpleLiteral>();
        }
        return this.isFormatOf;
    }

    /**
     * Gets the value of the isReferencedBy property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the isReferencedBy property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIsReferencedBy().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getIsReferencedBy() {
        if (isReferencedBy == null) {
            isReferencedBy = new ArrayList<SimpleLiteral>();
        }
        return this.isReferencedBy;
    }

    /**
     * Gets the value of the isReplacedBy property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the isReplacedBy property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIsReplacedBy().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getIsReplacedBy() {
        if (isReplacedBy == null) {
            isReplacedBy = new ArrayList<SimpleLiteral>();
        }
        return this.isReplacedBy;
    }

    /**
     * Gets the value of the isRequiredBy property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the isRequiredBy property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIsRequiredBy().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getIsRequiredBy() {
        if (isRequiredBy == null) {
            isRequiredBy = new ArrayList<SimpleLiteral>();
        }
        return this.isRequiredBy;
    }

    /**
     * Gets the value of the issued property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the issued property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIssued().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getIssued() {
        if (issued == null) {
            issued = new ArrayList<SimpleLiteral>();
        }
        return this.issued;
    }

    /**
     * Gets the value of the isVersionOf property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the isVersionOf property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIsVersionOf().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getIsVersionOf() {
        if (isVersionOf == null) {
            isVersionOf = new ArrayList<SimpleLiteral>();
        }
        return this.isVersionOf;
    }

    /**
     * Gets the value of the medium property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the medium property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMedium().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getMedium() {
        if (medium == null) {
            medium = new ArrayList<SimpleLiteral>();
        }
        return this.medium;
    }

    /**
     * Gets the value of the provenance property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the provenance property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProvenance().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getProvenance() {
        if (provenance == null) {
            provenance = new ArrayList<SimpleLiteral>();
        }
        return this.provenance;
    }

    /**
     * Gets the value of the references property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the references property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getReferences().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getReferences() {
        if (references == null) {
            references = new ArrayList<SimpleLiteral>();
        }
        return this.references;
    }

    /**
     * Gets the value of the replaces property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the replaces property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getReplaces().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getReplaces() {
        if (replaces == null) {
            replaces = new ArrayList<SimpleLiteral>();
        }
        return this.replaces;
    }

    /**
     * Gets the value of the requires property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the requires property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRequires().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getRequires() {
        if (requires == null) {
            requires = new ArrayList<SimpleLiteral>();
        }
        return this.requires;
    }

    /**
     * Gets the value of the spatial property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the spatial property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSpatial().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getSpatial() {
        if (spatial == null) {
            spatial = new ArrayList<SimpleLiteral>();
        }
        return this.spatial;
    }

    /**
     * Gets the value of the tableOfContents property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the tableOfContents property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTableOfContents().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getTableOfContents() {
        if (tableOfContents == null) {
            tableOfContents = new ArrayList<SimpleLiteral>();
        }
        return this.tableOfContents;
    }

    /**
     * Gets the value of the temporal property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the temporal property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTemporal().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimpleLiteral }
     * 
     * 
     */
    public List<SimpleLiteral> getTemporal() {
        if (temporal == null) {
            temporal = new ArrayList<SimpleLiteral>();
        }
        return this.temporal;
    }

}
